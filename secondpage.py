from PyQt5 import QtCore, QtGui, QtWidgets
import visa
import time
import pandas as pd


# Measurement results dictionary
FreqDic = {"110MHz": 0,"120MHz": 0,"310MHz": 0,"330MHz": 0,
           "960MHz": 0,"1100MHz": 0,"1250MHz": 0,"2700MHz": 0,"2900MHz": 0,"4000MHz": 0}

class Ui_SecondWindow(object):
    a = visa.ResourceManager()
    Fluke = a.get_instrument('GPIB0::18::INSTR')
    ResourceTupple = a.list_resources()
    ResorceStringList = []
    instrumentname = ''
    for i in ResourceTupple:
        ResorceStringList.append(i)
    for i in ResorceStringList:
        if i.startswith('USB'):
            instrumentname = i
    PowerSensor = a.get_instrument(instrumentname)
    Fluke.write("INST SINE")
    Fluke.write("UNIT:POWer W")
    Fluke.write("POWER 0.001")
    PowerSensor.write('SENS:FUNC \"POW:AVG\"')
    PowerSensor.write('SENS:AVER:COUNT:AUTO OFF')
    PowerSensor.write('SENS:AVER:COUN 16')
    PowerSensor.write('SENS:AVER:STAT ON')
    PowerSensor.write('SENS:AVER:TCON REP')
    PowerSensor.write('SENS:POW:AVG:APER 5e-3')



    def Mhz110(self):

        self.textBrowser_2.clear()
        self.textBrowser_2.setStyleSheet("background-color: #FFFFFF;;")
        self.Fluke.write("FREQ 110E6")
        self.Fluke.write("OUTPUT ON")
        time.sleep(2)
        self.PowerSensor.write('SENS:FREQ 110e6')
        self.PowerSensor.write("INIT:IMM")
        self.PowerSensor.write('FORMAT ASCII')
        results = self.PowerSensor.query('FETCH?').split(',')
        power_watt = float(results[0])
        if power_watt < 0:
            power_watt = 1E-12
        print(f'Measured power: {power_watt * 1000} miliWatt')
        self.powertext = str('{:0.3f}'.format(power_watt * 1000))
        self.textBrowser_2.append(self.powertext)
        self.textBrowser_2.setStyleSheet("background-color: #07da63;;")
        time.sleep(2)
        self.Fluke.write("OUTPUT OFF")
        FreqDic.update({"110MHz": self.powertext})
        print(FreqDic)


    def Mhz120(self):

        self.textBrowser_4.clear()
        self.Fluke.write("FREQ 120E6")
        self.Fluke.write("OUTPUT ON")
        time.sleep(2)
        self.PowerSensor.write('SENS:FREQ 120e6')
        self.PowerSensor.write("INIT:IMM")
        self.PowerSensor.write('FORMAT ASCII')
        results = self.PowerSensor.query('FETCH?').split(',')
        power_watt = float(results[0])
        if power_watt < 0:
            power_watt = 1E-12
        print(results)
        print(f'Measured power: {power_watt * 1000} miliWatt')
        self.powertext = str('{:0.3f}'.format(power_watt * 1000))
        print(type(self.powertext))
        self.textBrowser_4.append(self.powertext)
        self.textBrowser_4.setStyleSheet("background-color: #07da63;;")
        time.sleep(2)
        self.Fluke.write("OUTPUT OFF")
        FreqDic.update({"120MHz": self.powertext})

    def MHz310(self):

        self.textBrowser_6.clear()
        self.Fluke.write("FREQ 310E6")
        self.Fluke.write("OUTPUT ON")
        time.sleep(2)
        self.PowerSensor.write('SENS:FREQ 310e6')
        self.PowerSensor.write("INIT:IMM")
        self.PowerSensor.write('FORMAT ASCII')
        results = self.PowerSensor.query('FETCH?').split(',')
        power_watt = float(results[0])
        if power_watt < 0:
            power_watt = 1E-12
        print(results)
        print(f'Measured power: {power_watt * 1000} miliWatt')
        self.powertext = str('{:0.3f}'.format(power_watt * 1000))
        print(type(self.powertext))
        self.textBrowser_6.append(self.powertext)
        self.textBrowser_6.setStyleSheet("background-color: #07da63;;")
        time.sleep(2)
        self.Fluke.write("OUTPUT OFF")
        FreqDic.update({"310MHz": self.powertext})

    def MHz330(self):

        self.textBrowser_8.clear()
        self.Fluke.write("FREQ 330E6")
        self.Fluke.write("OUTPUT ON")
        time.sleep(2)
        self.PowerSensor.write('SENS:FREQ 330e6')
        self.PowerSensor.write("INIT:IMM")
        self.PowerSensor.write('FORMAT ASCII')
        results = self.PowerSensor.query('FETCH?').split(',')
        power_watt = float(results[0])
        if power_watt < 0:
            power_watt = 1E-12
        print(results)
        print(f'Measured power: {power_watt * 1000} miliWatt')
        self.powertext = str('{:0.3f}'.format(power_watt * 1000))
        print(type(self.powertext))
        self.textBrowser_8.append(self.powertext)
        self.textBrowser_8.setStyleSheet("background-color: #07da63;;")
        time.sleep(2)
        self.Fluke.write("OUTPUT OFF")
        FreqDic.update({"330MHz": self.powertext})

    def MHz960(self):

        self.textBrowser_10.clear()
        self.Fluke.write("FREQ 960E6")
        self.Fluke.write("OUTPUT ON")
        time.sleep(2)
        self.PowerSensor.write('SENS:FREQ 960e6')
        self.PowerSensor.write("INIT:IMM")
        self.PowerSensor.write('FORMAT ASCII')
        results = self.PowerSensor.query('FETCH?').split(',')
        power_watt = float(results[0])
        if power_watt < 0:
            power_watt = 1E-12
        print(results)
        print(f'Measured power: {power_watt * 1000} miliWatt')
        self.powertext = str('{:0.3f}'.format(power_watt * 1000))
        print(type(self.powertext))
        self.textBrowser_10.append(self.powertext)
        self.textBrowser_10.setStyleSheet("background-color: #07da63;;")
        time.sleep(2)
        self.Fluke.write("OUTPUT OFF")
        FreqDic.update({"960MHz": self.powertext})

    def MHz1100(self):

        self.textBrowser_12.clear()
        self.Fluke.write("FREQ 1100E6")
        self.Fluke.write("OUTPUT ON")
        time.sleep(2)
        self.PowerSensor.write('SENS:FREQ 1100e6')
        self.PowerSensor.write("INIT:IMM")
        self.PowerSensor.write('FORMAT ASCII')
        results = self.PowerSensor.query('FETCH?').split(',')
        power_watt = float(results[0])
        if power_watt < 0:
            power_watt = 1E-12
        print(results)
        print(f'Measured power: {power_watt * 1000} miliWatt')
        self.powertext = str('{:0.3f}'.format(power_watt * 1000))
        print(type(self.powertext))
        self.textBrowser_12.append(self.powertext)
        self.textBrowser_12.setStyleSheet("background-color: #07da63;;")
        time.sleep(2)
        self.Fluke.write("OUTPUT OFF")
        FreqDic.update({"1100MHz": self.powertext})

    def MHz1250(self):

        self.textBrowser_14.clear()
        self.Fluke.write("FREQ 1250E6")
        self.Fluke.write("OUTPUT ON")
        time.sleep(2)
        self.PowerSensor.write('SENS:FREQ 1250e6')
        self.PowerSensor.write("INIT:IMM")
        self.PowerSensor.write('FORMAT ASCII')
        results = self.PowerSensor.query('FETCH?').split(',')
        power_watt = float(results[0])
        if power_watt < 0:
            power_watt = 1E-12
        print(results)
        print(f'Measured power: {power_watt * 1000} miliWatt')
        self.powertext = str('{:0.3f}'.format(power_watt * 1000))
        print(type(self.powertext))
        self.textBrowser_14.append(self.powertext)
        self.textBrowser_14.setStyleSheet("background-color: #07da63;;")
        time.sleep(2)
        self.Fluke.write("OUTPUT OFF")
        FreqDic.update({"1250MHz": self.powertext})

    def MHz2700(self):

        self.textBrowser_16.clear()
        self.Fluke.write("FREQ 2700E6")
        self.Fluke.write("OUTPUT ON")
        time.sleep(2)
        self.PowerSensor.write('SENS:FREQ 2700e6')
        self.PowerSensor.write("INIT:IMM")
        self.PowerSensor.write('FORMAT ASCII')
        results = self.PowerSensor.query('FETCH?').split(',')
        power_watt = float(results[0])
        if power_watt < 0:
            power_watt = 1E-12
        print(results)
        print(f'Measured power: {power_watt * 1000} miliWatt')
        self.powertext = str('{:0.3f}'.format(power_watt * 1000))
        print(type(self.powertext))
        self.textBrowser_16.append(self.powertext)
        self.textBrowser_16.setStyleSheet("background-color: #07da63;;")
        time.sleep(2)
        self.Fluke.write("OUTPUT OFF")
        FreqDic.update({"2700MHz": self.powertext})
        print(FreqDic)

    def MHz2900(self):

        self.textBrowser_18.clear()
        self.Fluke.write("FREQ 2900E6")
        self.Fluke.write("OUTPUT ON")
        time.sleep(2)
        self.PowerSensor.write('SENS:FREQ 2900e6')
        self.PowerSensor.write("INIT:IMM")
        self.PowerSensor.write('FORMAT ASCII')
        results = self.PowerSensor.query('FETCH?').split(',')
        power_watt = float(results[0])
        if power_watt < 0:
            power_watt = 1E-12
        print(results)
        print(f'Measured power: {power_watt * 1000} miliWatt')
        self.powertext = str('{:0.3f}'.format(power_watt * 1000))
        print(type(self.powertext))
        self.textBrowser_18.append(self.powertext)
        self.textBrowser_18.setStyleSheet("background-color: #07da63;;")
        time.sleep(2)
        self.Fluke.write("OUTPUT OFF")
        FreqDic.update({"2900MHz": self.powertext})

    def MHz4000(self):

        self.textBrowser_20.clear()
        self.Fluke.write("FREQ 4000E6")
        self.Fluke.write("OUTPUT ON")
        time.sleep(2)
        self.PowerSensor.write('SENS:FREQ 4000e6')
        self.PowerSensor.write("INIT:IMM")
        self.PowerSensor.write('FORMAT ASCII')
        results = self.PowerSensor.query('FETCH?').split(',')
        power_watt = float(results[0])
        if power_watt < 0:
            power_watt = 1E-12
        print(results)
        print(f'Measured power: {power_watt * 1000} miliWatt')
        self.powertext = str('{:0.3f}'.format(power_watt * 1000))
        print(type(self.powertext))
        self.textBrowser_20.append(self.powertext)
        self.textBrowser_20.setStyleSheet("background-color: #07da63;;")
        time.sleep(2)
        self.Fluke.write("OUTPUT OFF")
        FreqDic.update({"4000MHz": self.powertext})
        print(FreqDic)

    def FinishButton(self):

        df = pd.DataFrame(data=FreqDic, index=[0])

        df.to_excel('dict1.xlsx')



    def setupUi(self, SecondWindow):
        SecondWindow.setObjectName("SecondWindow")
        SecondWindow.resize(822, 637)
        self.centralwidget = QtWidgets.QWidget(SecondWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(230, 30, 341, 51))
        font = QtGui.QFont()
        font.setPointSize(13)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setFrameShape(QtWidgets.QFrame.WinPanel)
        self.label.setFrameShadow(QtWidgets.QFrame.Plain)
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(40, 150, 171, 41))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_2.setFont(font)
        self.label_2.setFrameShape(QtWidgets.QFrame.WinPanel)
        self.label_2.setAlignment(QtCore.Qt.AlignCenter)
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(40, 220, 171, 41))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_3.setFont(font)
        self.label_3.setFrameShape(QtWidgets.QFrame.WinPanel)
        self.label_3.setAlignment(QtCore.Qt.AlignCenter)
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(40, 290, 171, 41))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_4.setFont(font)
        self.label_4.setFrameShape(QtWidgets.QFrame.WinPanel)
        self.label_4.setAlignment(QtCore.Qt.AlignCenter)
        self.label_4.setObjectName("label_4")
        self.line = QtWidgets.QFrame(self.centralwidget)
        self.line.setGeometry(QtCore.QRect(410, 120, 21, 391))
        font = QtGui.QFont()
        font.setPointSize(13)
        self.line.setFont(font)
        self.line.setFrameShadow(QtWidgets.QFrame.Plain)
        self.line.setLineWidth(9)
        self.line.setFrameShape(QtWidgets.QFrame.VLine)
        self.line.setObjectName("line")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(40, 360, 171, 41))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_5.setFont(font)
        self.label_5.setFrameShape(QtWidgets.QFrame.WinPanel)
        self.label_5.setAlignment(QtCore.Qt.AlignCenter)
        self.label_5.setObjectName("label_5")
        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_6.setGeometry(QtCore.QRect(40, 430, 171, 41))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_6.setFont(font)
        self.label_6.setFrameShape(QtWidgets.QFrame.WinPanel)
        self.label_6.setAlignment(QtCore.Qt.AlignCenter)
        self.label_6.setObjectName("label_6")
        self.label_7 = QtWidgets.QLabel(self.centralwidget)
        self.label_7.setGeometry(QtCore.QRect(450, 150, 171, 41))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_7.setFont(font)
        self.label_7.setFrameShape(QtWidgets.QFrame.WinPanel)
        self.label_7.setAlignment(QtCore.Qt.AlignCenter)
        self.label_7.setObjectName("label_7")
        self.label_8 = QtWidgets.QLabel(self.centralwidget)
        self.label_8.setGeometry(QtCore.QRect(450, 220, 171, 41))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_8.setFont(font)
        self.label_8.setFrameShape(QtWidgets.QFrame.WinPanel)
        self.label_8.setAlignment(QtCore.Qt.AlignCenter)
        self.label_8.setObjectName("label_8")
        self.label_9 = QtWidgets.QLabel(self.centralwidget)
        self.label_9.setGeometry(QtCore.QRect(450, 290, 171, 41))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_9.setFont(font)
        self.label_9.setFrameShape(QtWidgets.QFrame.WinPanel)
        self.label_9.setAlignment(QtCore.Qt.AlignCenter)
        self.label_9.setObjectName("label_9")
        self.label_10 = QtWidgets.QLabel(self.centralwidget)
        self.label_10.setGeometry(QtCore.QRect(450, 360, 171, 41))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_10.setFont(font)
        self.label_10.setFrameShape(QtWidgets.QFrame.WinPanel)
        self.label_10.setAlignment(QtCore.Qt.AlignCenter)
        self.label_10.setObjectName("label_10")
        self.label_11 = QtWidgets.QLabel(self.centralwidget)
        self.label_11.setGeometry(QtCore.QRect(450, 430, 171, 41))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_11.setFont(font)
        self.label_11.setFrameShape(QtWidgets.QFrame.WinPanel)
        self.label_11.setAlignment(QtCore.Qt.AlignCenter)
        self.label_11.setObjectName("label_11")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(660, 540, 101, 61))
        self.pushButton.clicked.connect(self.FinishButton)
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.pushButton.setFont(font)
        self.pushButton.setObjectName("pushButton")
        self.textBrowser_2 = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser_2.setGeometry(QtCore.QRect(320, 150, 61, 41))
        self.textBrowser_2.setAlignment(QtCore.Qt.AlignCenter)
        self.textBrowser_2.setObjectName("textBrowser_2")
        self.textBrowser_4 = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser_4.setGeometry(QtCore.QRect(320, 220, 61, 41))
        self.textBrowser_4.setAlignment(QtCore.Qt.AlignCenter)
        self.textBrowser_4.setObjectName("textBrowser_4")
        self.textBrowser_6 = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser_6.setGeometry(QtCore.QRect(320, 290, 61, 41))
        self.textBrowser_6.setObjectName("textBrowser_6")
        self.textBrowser_6.setAlignment(QtCore.Qt.AlignCenter)
        self.textBrowser_8 = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser_8.setGeometry(QtCore.QRect(320, 360, 61, 41))
        self.textBrowser_8.setObjectName("textBrowser_8")
        self.textBrowser_8.setAlignment(QtCore.Qt.AlignCenter)
        self.textBrowser_10 = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser_10.setGeometry(QtCore.QRect(320, 430, 61, 41))
        self.textBrowser_10.setObjectName("textBrowser_10")
        self.textBrowser_10.setAlignment(QtCore.Qt.AlignCenter)
        self.textBrowser_12 = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser_12.setGeometry(QtCore.QRect(730, 150, 61, 41))
        self.textBrowser_12.setObjectName("textBrowser_12")
        self.textBrowser_12.setAlignment(QtCore.Qt.AlignCenter)
        self.textBrowser_14 = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser_14.setGeometry(QtCore.QRect(730, 220, 61, 41))
        self.textBrowser_14.setObjectName("textBrowser_14")
        self.textBrowser_14.setAlignment(QtCore.Qt.AlignCenter)
        self.textBrowser_16 = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser_16.setGeometry(QtCore.QRect(730, 290, 61, 41))
        self.textBrowser_16.setObjectName("textBrowser_16")
        self.textBrowser_16.setAlignment(QtCore.Qt.AlignCenter)
        self.textBrowser_18 = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser_18.setGeometry(QtCore.QRect(730, 360, 61, 41))
        self.textBrowser_18.setObjectName("textBrowser_18")
        self.textBrowser_18.setAlignment(QtCore.Qt.AlignCenter)
        self.textBrowser_20 = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser_20.setGeometry(QtCore.QRect(730, 430, 61, 41))
        self.textBrowser_20.setObjectName("textBrowser_20")
        self.textBrowser_20.setAlignment(QtCore.Qt.AlignCenter)
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setGeometry(QtCore.QRect(220, 150, 91, 41))
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_3.clicked.connect(self.Mhz110)
        self.pushButton_4 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_4.setGeometry(QtCore.QRect(220, 220, 91, 41))
        self.pushButton_4.setObjectName("pushButton_4")
        self.pushButton_4.clicked.connect(self.Mhz120)
        self.pushButton_5 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_5.setGeometry(QtCore.QRect(220, 290, 91, 41))
        self.pushButton_5.setObjectName("pushButton_5")
        self.pushButton_5.clicked.connect(self.MHz310)
        self.pushButton_6 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_6.setGeometry(QtCore.QRect(220, 360, 91, 41))
        self.pushButton_6.setObjectName("pushButton_6")
        self.pushButton_6.clicked.connect(self.MHz330)
        self.pushButton_7 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_7.setGeometry(QtCore.QRect(220, 430, 91, 41))
        self.pushButton_7.setObjectName("pushButton_7")
        self.pushButton_7.clicked.connect(self.MHz960)
        self.pushButton_8 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_8.setGeometry(QtCore.QRect(630, 150, 91, 41))
        self.pushButton_8.setObjectName("pushButton_8")
        self.pushButton_8.clicked.connect(self.MHz1100)
        self.pushButton_9 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_9.setGeometry(QtCore.QRect(630, 220, 91, 41))
        self.pushButton_9.setObjectName("pushButton_9")
        self.pushButton_9.clicked.connect(self.MHz1250)
        self.pushButton_10 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_10.setGeometry(QtCore.QRect(630, 290, 91, 41))
        self.pushButton_10.setObjectName("pushButton_10")
        self.pushButton_10.clicked.connect(self.MHz2700)
        self.pushButton_11 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_11.setGeometry(QtCore.QRect(630, 360, 91, 41))
        self.pushButton_11.setObjectName("pushButton_11")
        self.pushButton_11.clicked.connect(self.MHz2900)
        self.pushButton_12 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_12.setGeometry(QtCore.QRect(630, 430, 91, 41))
        self.pushButton_12.setObjectName("pushButton_12")
        self.pushButton_12.clicked.connect(self.MHz4000)
        SecondWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(SecondWindow)
        self.statusbar.setObjectName("statusbar")
        SecondWindow.setStatusBar(self.statusbar)

        self.retranslateUi(SecondWindow)
        QtCore.QMetaObject.connectSlotsByName(SecondWindow)

    def retranslateUi(self, SecondWindow):
        _translate = QtCore.QCoreApplication.translate
        SecondWindow.setWindowTitle(_translate("SecondWindow", "CalFactor"))
        self.label.setText(_translate("SecondWindow", "Measurement Page "))
        self.label_2.setText(_translate("SecondWindow", "110 MHz - 1 mW"))
        self.label_3.setText(_translate("SecondWindow", "120 MHz - 1 mW"))
        self.label_4.setText(_translate("SecondWindow", "310 MHz - 1 mW"))
        self.label_5.setText(_translate("SecondWindow", "330 MHz - 1 mW"))
        self.label_6.setText(_translate("SecondWindow", "960 MHz - 1 mW"))
        self.label_7.setText(_translate("SecondWindow", "1100 MHz - 1 mW"))
        self.label_8.setText(_translate("SecondWindow", "1250 MHz - 1 mW"))
        self.label_9.setText(_translate("SecondWindow", "2700 MHz - 1 mW"))
        self.label_10.setText(_translate("SecondWindow", "2900 MHz - 1 mW"))
        self.label_11.setText(_translate("SecondWindow", "4000 MHz - 1 mW"))
        self.pushButton.setText(_translate("SecondWindow", "Finish"))
        self.pushButton_3.setText(_translate("SecondWindow", "Start \n Measurement"))
        self.pushButton_4.setText(_translate("SecondWindow", "Start \n Measurement"))
        self.pushButton_5.setText(_translate("SecondWindow", "Start \n Measurement"))
        self.pushButton_6.setText(_translate("SecondWindow", "Start \n Measurement"))
        self.pushButton_7.setText(_translate("SecondWindow", "Start \n Measurement"))
        self.pushButton_8.setText(_translate("SecondWindow", "Start \n Measurement"))
        self.pushButton_9.setText(_translate("SecondWindow", "Start \n Measurement"))
        self.pushButton_10.setText(_translate("SecondWindow", "Start \n Measurement"))
        self.pushButton_11.setText(_translate("SecondWindow", "Start \n Measurement"))
        self.pushButton_12.setText(_translate("SecondWindow", "Start \n Measurement"))


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    SecondWindow = QtWidgets.QMainWindow()
    ui = Ui_SecondWindow()
    ui.setupUi(SecondWindow)
    SecondWindow.show()
    sys.exit(app.exec_())
